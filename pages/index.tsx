/** @jsxImportSource theme-ui */

import { clusterApiUrl, Connection, PublicKey } from "@solana/web3.js"
import {
  Button,
  Flex,
  Heading,
  Input,
  Select,
  Text,
} from "@theme-ui/components"
import type { NextPage } from "next"
import Head from "next/head"
import { FormEvent, useRef, useState } from "react"

import { getNFTsByOwner, NFT } from "../utils/nfts"

const Home: NextPage = () => {
  const [NFTs, setNFTs] = useState<NFT[] | null>(null)

  const inputRef = useRef<HTMLInputElement>(null)
  const selectRef = useRef<HTMLSelectElement>(null)
  const codeRef = useRef<HTMLDivElement>(null)

  const handleFormSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault()

    const formData = new FormData(e.currentTarget)

    const inputValue = formData.get("address")
    const selectValue = formData.get("network")

    if (!inputValue || !selectValue) {
      throw new Error("Invalid inputs.")
    }

    const addr = new PublicKey(inputValue)

    const connection = new Connection(
      clusterApiUrl(selectValue === "devnet" ? "devnet" : "mainnet-beta")
    )

    const fetchedNFTs = await getNFTsByOwner(addr, connection)
    setNFTs(fetchedNFTs)
  }

  return (
    <div>
      <Head>
        <title>Localnet NFT Cloner</title>
        <meta name="description" content="Clone NFTs from devnet to localnet" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main
        sx={{
          margin: "0 auto",
          maxWidth: "64rem",
          alignSelf: "stretch",
          textAlign: "center",
          paddingTop: "8rem",
        }}
      >
        <Heading>Localnet NFTs config generator</Heading>
        <p>Clone NFTs from devnet to localnet</p>
        {/* <div>
          <ul
            sx={{
              gap: ".8rem",
            }}
          >
            <li>
              Working on Localnet is 100x faster, but you always need to clone
              the accounts to the validator
            </li>
            <li>
              {" "}
              This app will clone all accounts from a wallet address, and parse
              into toml format.
            </li>
            <li>
              All you need to do is to copy the lines and paste into your
              Anchor.toml file
            </li>
          </ul>
        </div> */}
        <form
          sx={{
            gap: "1.6rem",
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            margin: "3.2rem 0",
          }}
          onSubmit={handleFormSubmit}
        >
          <label
            sx={{
              display: "flex",
              flexDirection: "column",
            }}
          >
            Wallet address:
            <Input
              sx={{
                minWidth: "24rem",
                ":-webkit-autofill": {
                  boxShadow: "none!important",
                },
              }}
              ref={inputRef}
              name="address"
              placeholder="Paste your wallet address here"
            />
          </label>
          <label
            sx={{
              display: "flex",
              flexDirection: "column",
            }}
          >
            Network:
            <Select
              sx={{
                minWidth: "24rem",
              }}
              name="network"
              ref={selectRef}
              defaultValue="devnet"
            >
              <option value="mainnet-beta">Mainnet</option>
              <option value="devnet">Devnet</option>
            </Select>
          </label>
          <Button type="submit">Get accounts!</Button>
        </form>
        {NFTs ? (
          <>
            <Flex
              sx={{
                margin: "1.6rem 0",
                borderTop: "1px solid",
                borderColor: "text",
                paddingTop: "1.6rem",
              }}
            >
              <Text variant="heading2">Your Anchor.toml file</Text>
              <Button
                sx={{
                  alignSelf: "flex-end",
                  justifySelf: "flex-end",
                  marginLeft: "auto",
                }}
                variant="secondary"
                onClick={() => {
                  if (codeRef.current) {
                    navigator.clipboard.writeText(codeRef.current?.innerText)
                  }
                }}
              >
                copy
              </Button>
            </Flex>
            <div
              sx={{
                backgroundColor: "background2",
                padding: "1.6rem 3.2rem",
                textAlign: "left",
              }}
              ref={codeRef}
              lang="toml"
            >
              ### Generated by solana-localnet-nfts
              <br />
              <br />
              # Necessary for test validator <br />
              [test.validator]
              <br />
              url = "https://api.devnet.solana.com"
              <br />
              [test]
              <br />
              startup_wait = 20000
              <br />
              <br />
              ### Cloning Accounts from address{" "}
              {inputRef.current?.value.slice(0, 5)}... on{" "}
              {selectRef.current?.value}
              {NFTs &&
                NFTs.map((nft, index) => {
                  return (
                    <>
                      <br /># NFT #{index} Mint address (
                      {nft.onchainMetadata.data.name})
                      <br />
                      [[test.validator.clone]]
                      <br />
                      address = "{nft.mint.toString()}"
                      <br /># User NFT #{index} Associated Token Account address
                      <br />
                      [[test.validator.clone]]
                      <br />
                      address = "{nft.pubkey?.toString()}"
                      <br /># NFT #{index} Metadata Program Derived address
                      <br />
                      [[test.validator.clone]]
                      <br />
                      address = "{nft.metadataPDA.toString()}"
                      <br />
                      <br />
                    </>
                  )
                })}
            </div>
          </>
        ) : null}
      </main>
    </div>
  )
}

export default Home

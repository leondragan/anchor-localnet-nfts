import { clusterApiUrl, Connection, PublicKey } from "@solana/web3.js"
import type { NextPage } from "next"
import Head from "next/head"
import Image from "next/image"
import { FormEvent, useRef, useState } from "react"
import styles from "../styles/Home.module.css"
import { getNFTsByOwner, NFT } from "../utils/nfts"

const Home: NextPage = () => {
  const [NFTs, setNFTs] = useState<NFT[] | null>(null)

  const inputRef = useRef<HTMLInputElement>(null)
  const selectRef = useRef<HTMLSelectElement>(null)
  const codeRef = useRef<HTMLElement>(null)

  const handleFormSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault()

    const formData = new FormData(e.currentTarget)

    const inputValue = formData.get("address")
    const selectValue = formData.get("network")

    if (!inputValue || !selectValue) {
      throw new Error("Invalid inputs.")
    }

    const addr = new PublicKey(inputValue)

    const connection = new Connection(
      clusterApiUrl(selectValue === "devnet" ? "devnet" : "mainnet-beta")
    )

    const fetchedNFTs = await getNFTsByOwner(addr, connection)
    setNFTs(fetchedNFTs)
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Localnet NFTs config generator</h1>
        <p className={styles.description}>
          Get started by entering a wallet address:{" "}
          <code className={styles.code}>pages/index.tsx</code>
        </p>
        Why?
        <div className={styles.grid}>
          <ul>
            <li>
              Working on Localnet is 100x faster, but you always need to clone
              the accounts to the validator
            </li>
            <li>
              {" "}
              This app will clone all accounts from a wallet address, and parse
              into toml format.
            </li>
            <li>
              All you need to do is to copy the lines and paste into your
              Anchor.toml file
            </li>
          </ul>
        </div>
        <form onSubmit={handleFormSubmit}>
          <label>
            Wallet address:
            <input ref={inputRef} name="address" />
          </label>
          <label>
            Network:
            <select name="network" ref={selectRef} defaultValue="devnet">
              <option value="mainnet-beta">Mainnet</option>
              <option value="devnet">Devnet</option>
            </select>
          </label>
          <button type="submit">Generate Anchor.toml!</button>
        </form>
        <button
          onClick={() => {
            if (codeRef.current) {
              navigator.clipboard.writeText(codeRef.current?.innerText)
            }
          }}
        >
          copy
        </button>
        <code ref={codeRef} lang="toml">
          # Necessary for test validator <br />
          [test.validator]
          <br />
          url = "https://api.devnet.solana.com"
          <br />
          <br />
          [test]
          <br />
          startup_wait = 20000
          <br />
          <br />
          ### Cloning Accounts from address {inputRef.current?.value} on{" "}
          {selectRef.current?.value}
          {NFTs &&
            NFTs.map((nft, index) => {
              return (
                <>
                  <br /># NFT #{index} Mint address (
                  {nft.onchainMetadata.data.name})
                  <br />
                  [[test.validator.clone]]
                  <br />
                  address = "{nft.mint.toString()}"
                  <br /># User NFT #{index} Associated Token Account address
                  <br />
                  [[test.validator.clone]]
                  <br />
                  address = "{nft.pubkey?.toString()}"
                  <br /># NFT #{index} Metadata Program Derived address
                  <br />
                  [[test.validator.clone]]
                  <br />
                  address = "{nft.metadataPDA.toString()}"
                  <br />
                  <br />
                </>
              )
            })}
        </code>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export default Home
